'''Una empresa tiene un conjunto de procesos (P) compuestos de módulos (M).
Dispone de ejemplos de carga de CPU (C) de los procesos pero no de los módulos.

El objeto de la optimización es conocer cuál es la carga de CPU de cada módulo
de modo que se minimice el error entre la carga estimada y la real, que además
toma diferentes valores en diferentes momentos.

Un cromosoma (ch) se representará con cada gen siendo el consumo de CPU de cada módulo.
El consumo de cada proceso es el producto ch * PM más una constante X igual para todos los procesos
El objetivo es minimizar la distancia entre ch * PM y C.

Es posible resolverlo por descenso del gradiente o con un optimizador de tensorflow.

Para ello, las entradas son cada fila de PM, las salidas cada elemento de C y el vector a
optimizar es ch.
'''

import numpy as np

# matriz de uso de módulos por cada proceso (PM): una fila por proceso, una columna por módulo
# la última columna es el consumo constante X todos a 1

PM = np.array([
[1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0], [0, 1, 1, 1, 0, 1, 1, 0, 1], [1, 0, 1, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 1, 0], [1, 0, 1, 1, 0, 1, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0], [0, 1, 0, 1, 0, 1, 1, 0, 0], [0, 0, 1, 1, 0, 0, 1, 0, 0], [1, 1, 1, 1, 0, 1, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0, 0, 1], [1, 1, 0, 1, 1, 0, 0, 1, 0], [1, 0, 1, 0, 0, 1, 0, 1, 1], [1, 1, 1, 0, 1, 1, 1, 1, 1], [1, 0, 0, 1, 1, 1, 1, 0, 1], [0, 1, 0, 0, 0, 0, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0, 0, 0], [0, 1, 0, 0, 1, 0, 1, 1, 0], [1, 0, 0, 1, 0, 1, 0, 1, 0], [0, 1, 1, 1, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 1, 1, 1, 0], [0, 1, 1, 1, 0, 1, 0, 0, 1], [1, 1, 1, 0, 0, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1, 1, 0], [0, 1, 0, 1, 0, 1, 1, 0, 0], [1, 1, 1, 1, 1, 1, 0, 1, 0], [0, 1, 1, 0, 1, 0, 0, 0, 1], [1, 0, 1, 1, 0, 0, 0, 1, 1], [0, 0, 1, 1, 1, 1, 0, 0, 0], [1, 1, 0, 0, 1, 0, 0, 0, 0], [1, 0, 1, 1, 0, 0, 0, 0, 1], [1, 0, 0, 1, 1, 1, 0, 1, 0], [0, 0, 0, 0, 1, 1, 0, 0, 1], [1, 0, 1, 0, 1, 1, 1, 0, 0], [1, 1, 1, 0, 0, 0, 1, 1, 0], [0, 1, 0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 1, 1, 0, 1], [1, 0, 1, 0, 1, 1, 0, 0, 1], [1, 1, 1, 1, 0, 0, 1, 1, 0], [1, 1, 1, 0, 1, 0, 1, 1, 0], [1, 1, 1, 1, 0, 1, 0, 1, 0], [0, 0, 0, 0, 0, 1, 0, 1, 1], [1, 0, 0, 0, 1, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 0, 0, 0], [1, 1, 1, 0, 1, 0, 0, 0, 0], [1, 1, 0, 1, 0, 1, 0, 1, 1], [0, 1, 1, 0, 0, 1, 0, 0, 1], [0, 1, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 0, 1, 1, 1, 0, 0], [1, 0, 1, 1, 1, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 0, 1, 0], [0, 0, 0, 1, 0, 1, 1, 1, 1], [0, 0, 1, 0, 0, 0, 1, 0, 1], [0, 0, 0, 0, 1, 1, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0, 1, 0, 0], [0, 0, 1, 0, 0, 0, 1, 1, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1], [0, 1, 1, 0, 1, 1, 0, 0, 1], [0, 0, 1, 1, 1, 1, 1, 0, 0], [0, 1, 1, 0, 0, 0, 0, 0, 1], [1, 0, 1, 0, 0, 1, 1, 1, 1], [1, 0, 1, 1, 1, 0, 1, 0, 1], [1, 1, 1, 0, 0, 1, 0, 0, 0], [1, 0, 0, 1, 1, 1, 1, 1, 1], [1, 0, 1, 0, 1, 1, 1, 0, 1], [0, 1, 0, 1, 0, 1, 1, 1, 0], [1, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 0, 1, 1, 0, 1, 1, 1], [0, 1, 0, 1, 1, 0, 0, 1, 1], [1, 0, 0, 1, 1, 0, 1, 0, 0], [0, 0, 0, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 1, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 1, 0], [1, 1, 1, 1, 0, 0, 0, 1, 1], [1, 1, 1, 1, 0, 0, 1, 0, 1], [0, 1, 0, 1, 1, 0, 1, 1, 1], [0, 1, 0, 1, 1, 0, 1, 1, 0], [1, 0, 0, 0, 1, 0, 0, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0], [0, 1, 1, 1, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 1, 1, 1], [1, 1, 1, 0, 0, 0, 1, 1, 0], [1, 0, 1, 1, 1, 1, 0, 0, 1], [0, 1, 0, 0, 1, 1, 0, 0, 1], [0, 1, 1, 1, 1, 0, 0, 1, 1], [1, 0, 1, 0, 0, 0, 1, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 1], [0, 0, 1, 0, 1, 0, 1, 1, 1], [0, 0, 1, 0, 0, 1, 0, 0, 0], [1, 1, 1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 0], [0, 1, 0, 1, 1, 0, 1, 0, 0], [1, 0, 1, 1, 1, 1, 0, 1, 0], [0, 0, 1, 1, 1, 1, 0, 0, 1], [1, 0, 0, 0, 0, 1, 1, 1, 1], [1, 0, 1, 1, 1, 1, 1, 1, 0], [1, 0, 0, 1, 1, 1, 0, 0, 0], [1, 0, 0, 1, 1, 1, 1, 0, 0]
])

# vector de consumo de CPU por proceso (podríamos usar la media de consumos para ese proceso)

C = np.array([11, 9, 17, 12, 12, 16, 10, 13, 10, 17, 14, 14, 11, 21, 18, 4, 7, 12, 11, 24, 18, 14, 16, 6, 13, 21, 11, 11, 16, 8, 9, 16, 10, 16, 11, 6, 16, 13, 14, 15, 16, 16, 7, 7, 19, 11, 14, 10, 2, 18, 19, 9, 14, 7, 13, 10, 15, 9, 14, 15, 19, 6, 14, 17, 10, 20, 17, 15, 11, 18, 14, 13, 8, 7, 10, 13, 14, 17, 16, 9, 11, 10, 10, 11, 18, 12, 17, 8, 8, 14, 7, 11, 2, 14, 19, 17, 11, 22, 14, 17])


# now is the fitness function
